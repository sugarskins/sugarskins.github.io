{"version":3,"sources":["logo.svg","utils.js","SaleItemComponent.js","PurchaseHistoryComponent.js","validation.js","InfoCardsComponent.js","ItemsListComponent.js","HelpComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CSGO_APP_ID","CSGO_CONTEXT_ID","inspectLinkToSMAD","inspectLink","match","toLowerCase","s","m","a","d","getInventoryURL","smad","TradeOutcome","SUCCESSFULLY_CONFIRMED","UNABLE_TO_CONFIRM_PRIVATE_PROFILE","DELETED_LISTING","getTimeDifference","future","past","delta","Math","abs","days","floor","hours","minutes","seconds","makeGroups","array","groupSize","Error","groups","group","i","length","push","getMetamask","window","ethereum","console","log","info","PURCHASE_STATUSES","REQUEST_PENDING","message","variant","REQUESTED_SUCCESFULLY","REQUEST_FAILED","failureReason","SaleItemComponent","props","state","showPurchaseModal","metamaskAvailable","metamaskPermissionGranted","metamaskWeb3","contractInstance","purchaseStatus","handleShowPurchaseModal","bind","handleClosePurchaseModal","handlePurchaseRequest","requestMetamaskAccess","metamaskEthereum","this","setState","userTradeURL","alert","Web3","web3","currentProvider","eth","Contract","CSGOSteamTradeContract","abi","csgoSteamTradeContractAddress","enable","error","item","listingId","methods","createPurchaseOffer","send","from","defaultAccount","value","price","response","stack","Card","border","style","width","bg","text","Img","src","imageSrc","Body","Title","fontSize","skinName","statTrak","Text","displayPrice","currency","wear","paintSeed","Link","href","role","aria-label","inventoryLink","target","height","Button","onClick","Modal","size","className","show","onHide","Header","closeButton","type","Alert","Footer","disabled","Component","getStatusBadge","pending","tradeOutcome","utils","toString","PurchaseHistoryComponent","pendingItems","pendingPurchases","forEach","sort","item1","item2","purchaseOffer","creationTimestamp","pastPurchases","p1","p2","blockNumber","pastItems","map","listing","returnValues","allItems","concat","items","Table","key","idx","fromWei","diff","getPrettyAge","Date","now","Badge","validateTradeURL","tradeURL","trim","valid","URL","host","hostname","protocol","pathname","search","parsedQuerystring","querystring","parse","slice","InfoCardsComponent","rowGroupedItems","img","title","Container","rowOfItems","rowIndex","Row","CardDeck","display","flexDirection","justifyContent","Col","flex","ItemData","contractListingToDisplayItem","ethToFiatPrice","ownerInspectLink","inventoryURL","etherValue","BigNumber","multipliedBy","toFixed","getDisplayPrice","extraItemData","JSON","image","COOKIE_TRADE_URL","CONTRACT_ADDRESS_QUERY_PARAM","RPC_QUERY_PARAM","DEFAULT_RPC","ItemsListComponent","cookies","searchParams","URLSearchParams","location","currentTradeURL","get","listings","validTradeURL","errorState","ethNetworkURL","showHistoryModal","initialLoadFinished","e","alertVariant","handleTradeURLSubmit","handleVendorContractSubmit","listingsCount","getListingsCount","call","listingIds","Axios","ethPricingResponse","ethToFiatPriceValue","data","Promise","all","id","getListing","matchingBuyerTradeURLHash","keccak256","getPastEvents","fromBlock","toBlock","filter","p","buyerTradeURL","includes","handleWeb3ConnectionFailure","event","preventDefault","form","currentTarget","elements","formTradeURL","tradeURLValidation","set","path","vendorContract","formVendorContract","history","reload","displayItems","exists","renderNavBar","renderTradeDataForm","Spinner","animation","renderHistoryModal","renderItemListings","Navbar","expand","Brand","alt","Nav","renderPurchaseCountsBadges","processing","doneSuccessfully","doneFailed","Form","noValidate","validated","onSubmit","Group","as","controlId","Label","column","sm","Control","isInvalid","placeholder","defaultValue","Feedback","dialogClassName","withCookies","HelpComponent","Help","App","component","Boolean","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,kC,ycCArCC,EAAc,IACdC,EAAkB,EAoET,OACXC,kBAnEJ,SAA2BC,GACvB,IACIC,EAAQD,EAAYE,cAAcD,MADb,qCAEzB,MAAO,CACLE,EAAgB,MAAbF,EAAM,GAAaA,EAAM,GAAK,KACjCG,EAAgB,MAAbH,EAAM,GAAaA,EAAM,GAAK,KACjCI,EAAGJ,EAAM,GACTK,EAAGL,EAAM,KA6DXM,gBAxDJ,SAAyBC,GACrB,MAAM,uCAAN,OAA8CA,EAAKL,EAAnD,sBAAkEN,EAAlE,YAAiFC,EAAjF,YAAoGU,EAAKH,IAwDzGI,aArDiB,CACjBC,uBAAwB,EACxBC,kCAAmC,EACnCC,gBAAiB,GAmDjBC,kBAhDJ,SAA2BC,EAAQC,GAE/B,IAAIC,EAAQC,KAAKC,IAAIJ,EAASC,GAAQ,IAGlCI,EAAOF,KAAKG,MAAMJ,EAAQ,OAC9BA,GAAgB,MAAPG,EAGT,IAAIE,EAAQJ,KAAKG,MAAMJ,EAAQ,MAAQ,GACvCA,GAAiB,KAARK,EAET,IAAIC,EAAUL,KAAKG,MAAMJ,EAAQ,IAAM,GAInCO,GAHJP,GAAmB,GAAVM,GAGa,GACtB,MAAO,CACHH,OACAE,QACAC,UACAC,QAASN,KAAKG,MAAMG,KA4BxBC,WAxBJ,SAAoBC,EAAOC,GACvB,GAAIA,EAAY,EACZ,MAAM,IAAIC,MAAJ,qBAAwBD,EAAxB,UAKV,IAFA,IAAME,EAAS,GACXC,EAAQ,GACHC,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAC1BD,EAAME,OAASL,EACfG,EAAMG,KAAKP,EAAMK,KAEjBF,EAAOI,KAAKH,GACZA,EAAQ,CAACJ,EAAMK,KAIvB,OADAF,EAAOI,KAAKH,GACLD,I,gBCxDX,SAASK,IACL,MAA+B,qBAApBC,OAAOC,UACdC,QAAQC,IAAI,4BAELH,OAAOC,WAEdC,QAAQE,KAAK,sBACN,GAIf,IAAMC,EAAoB,CACtBC,gBAAiB,CACbC,QAAS,6DACTC,QAAS,QAEbC,sBAAuB,CACnBF,QAAS,uFACTC,QAAS,WAEbE,eAAgB,SAACC,GACb,MAAQ,CACJJ,QAAQ,uCAAD,OAAyCI,GAChDH,QAAS,YA2JNI,E,YArJX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,mBAAmB,EACnBC,mBAAmB,EACnBC,2BAA2B,EAC3BC,aAAc,KACdC,iBAAkB,KAClBC,eAAgB,MAGpB,EAAKC,wBAA0B,EAAKA,wBAAwBC,KAA7B,gBAC/B,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAChC,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAC7B,EAAKG,sBAAwB,EAAKA,sBAAsBH,KAA3B,gBAdd,E,wMAkBTI,EAAmB3B,I,SACnB4B,KAAKC,SAAS,CAAEZ,kBAAmBU,I,mQAIpCC,KAAKd,MAAMgB,a,uBACZC,MAAM,mD,0CAGJH,KAAKF,wB,uBACLE,KAAKC,SAAS,CAAEb,mBAAmB,I,6QAInCW,EAAmB3B,K,wBAEfmB,EAAe,IAAIa,IAAK/B,OAAOgC,KAAKC,iBACpCd,EAAmB,IAAID,EAAagB,IAAIC,SAC1CC,EAAuBC,IACvBV,KAAKd,MAAMyB,8BACX,I,SAEEX,KAAKC,SAAS,CAAET,mBAAkBD,iB,gCAG9BQ,EAAiBa,S,cACvBrC,QAAQE,KAAK,0C,UAGPuB,KAAKC,SAAS,CAAEX,2BAA2B,I,iEAGjDf,QAAQsC,MAAM,sC,UACRb,KAAKC,SAAS,CAAEX,2BAA2B,I,2RAMnDU,KAAKC,SAAS,CAAEb,mBAAmB,I,2QAIzCb,QAAQE,KAAR,gDAAsDuB,KAAKd,MAAM4B,KAAKC,UAAtE,2BAAkGf,KAAKd,MAAMgB,aAA7G,M,kBAIUF,KAAKC,SAAS,CAChBR,eAAgBf,EAAkBC,kB,uBAGfqB,KAAKb,MAAMK,iBAAiBwB,QAClDC,oBAAoBjB,KAAKd,MAAM4B,KAAKC,UAAWf,KAAKd,MAAMgB,cAC1DgB,KAAK,CACFC,KAAM9C,OAAOgC,KAAKE,IAAIa,eACtBC,MAAOrB,KAAKd,MAAM4B,KAAKQ,Q,cAJrBC,E,gBAOAvB,KAAKC,SAAS,CAChBR,eAAgBf,EAAkBI,wB,OAE1CP,QAAQE,KAAK8C,G,yDAEThD,QAAQsC,MAAR,2DAAkE,KAAEW,Q,UAC9DxB,KAAKC,SAAS,CAChBR,eAAgBf,EAAkBK,eAAe,KAAEH,W,+IAQ3D,OACI,6BACA,kBAAC6C,EAAA,EAAD,CAAMC,OAAO,OAAOC,MAAO,CAAEC,MAAO,SAAYC,GAAG,OAAQC,KAAK,SAC5D,kBAACL,EAAA,EAAKM,IAAN,CAAUlD,QAAQ,MAAMmD,IAAKhC,KAAKd,MAAM4B,KAAKmB,WAC7C,kBAACR,EAAA,EAAKS,KAAN,KACA,kBAACT,EAAA,EAAKU,MAAN,CAAYR,MAAO,CAACS,SAAU,KAA9B,IAAsCpC,KAAKd,MAAM4B,KAAKuB,SAAtD,IAAiErC,KAAKd,MAAM4B,KAAKwB,SAAW,iBAAc,KAA1G,KACA,kBAACb,EAAA,EAAKc,KAAN,CAAWZ,MAAO,CAACS,SAAU,KACzBpC,KAAKd,MAAM4B,KAAK0B,aAAanB,MADjC,IACyCrB,KAAKd,MAAM4B,KAAK0B,aAAaC,UAEtE,kBAAChB,EAAA,EAAKc,KAAN,CAAWZ,MAAO,CAACS,SAAU,KAA7B,SACWpC,KAAKd,MAAM4B,KAAK4B,MAE3B,kBAACjB,EAAA,EAAKc,KAAN,CAAWZ,MAAO,CAACS,SAAU,KAA7B,eACiBpC,KAAKd,MAAM4B,KAAK6B,WAEjC,kBAAClB,EAAA,EAAKmB,KAAN,CAAWC,KAAM7C,KAAKd,MAAM4B,KAAK3E,aAC7B,0BAAM2G,KAAK,MAAMC,aAAW,QAA5B,iBAGJ,kBAACtB,EAAA,EAAKmB,KAAN,CAAWC,KAAM7C,KAAKd,MAAM4B,KAAKkC,cAAeC,OAAO,SAASnB,KAAK,iBACrE,yBAAKoB,OAAO,KAAKtB,MAAM,KAAKI,IAAI,sEAEhC,kBAACmB,EAAA,EAAD,CAAQtE,QAAQ,UAAUuE,QAASpD,KAAKN,yBAAxC,gBAGJ,kBAAC2D,EAAA,EAAD,CAAOC,KAAK,KAAKC,UAAU,QAAQC,KAAMxD,KAAKb,MAAMC,kBAAmBqE,OAAQzD,KAAKJ,0BAC5E,kBAACyD,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACzB,kBAACN,EAAA,EAAMlB,MAAP,kBAEA,kBAACkB,EAAA,EAAMnB,KAAP,KACGlC,KAAKb,MAAME,kBAE8D,KAFzC,iCAAM,0BAAMyD,KAAK,MAAMC,aAAW,oBAA5B,UAAN,IAA8D,0BAAMD,KAAK,MAAMC,aAAW,OAA5B,gBAA9D,uBAC9B,uBAAGF,KAAK,wBAAR,YAD8B,+EAGjC7C,KAAKb,MAAME,oBAAsBW,KAAKb,MAAMG,0BAA6B,iCAAM,0BAAMwD,KAAK,MAAMC,aAAW,oBAA5B,UAAN,IAA8D,0BAAMD,KAAK,MAAMC,aAAW,OAA5B,gBAA9D,8CAEjE,uBAAGF,KAAK,wBAAR,YAFiE,wBAGtE,kBAACM,EAAA,EAAD,CAAQS,KAAK,SAASL,UAAU,kBAAkBH,QAASpD,KAAKF,uBAAhE,kBAHsE,KAGoD,KAC3H,2BAAIE,KAAKd,MAAM4B,KAAKuB,UACpB,qCAAWrC,KAAKd,MAAM4B,KAAK0B,aAAanB,MAAxC,IAAgDrB,KAAKd,MAAM4B,KAAK0B,aAAaC,UAC7E,oCAAUzC,KAAKd,MAAM4B,KAAK4B,MACzB1C,KAAKb,MAAMM,eAAkB,kBAACoE,EAAA,EAAD,CAAOhF,QAASmB,KAAKb,MAAMM,eAAeZ,SAA1C,IAAqDmB,KAAKb,MAAMM,eAAeb,QAA/E,KAAoG,MAEtI,kBAACyE,EAAA,EAAMS,OAAP,KAEA,4BAAQF,KAAK,SAASL,UAAU,kBAAkBQ,UAAW/D,KAAKb,MAAME,oBAAsBW,KAAKb,MAAMG,0BAA6B8D,QAASpD,KAAKH,uBAApJ,cACA,uBAAGgD,KAAM7C,KAAKd,MAAM4B,KAAK3E,aAAa,4BAAQyH,KAAK,SAASL,UAAU,mBAAhC,oBACtC,uBAAGN,OAAO,SAASJ,KAAM7C,KAAKd,MAAM4B,KAAKkC,eAAe,4BAAQY,KAAK,SAASL,UAAU,mBAAhC,wBACxD,kBAACJ,EAAA,EAAD,CAAQtE,QAAQ,YAAYuE,QAASpD,KAAKJ,0BAA1C,gB,GA3IYoE,a,SClBhC,SAASC,EAAenD,GACpB,OAAIA,EAAKoD,QACE,CACHrF,QAAS,UACTiD,KAAM,oBAGNhB,EAAKqD,eAAiBC,EAAMxH,aAAaG,gBAAgBsH,WAClD,CACHxF,QAAS,SACTiD,KAAM,qBAEHhB,EAAKqD,eAAiBC,EAAMxH,aAAaC,uBAAuBwH,WAChE,CACHxF,QAAS,UACTiD,KAAM,aAEHhB,EAAKqD,eAAiBC,EAAMxH,aAAaE,kCAAkCuH,WAC3E,CACHxF,QAAS,SACTiD,KAAM,uBAGH,CACHjD,QAAS,OACTiD,KAAM,W,IAuEPwC,E,YA/DX,WAAYpF,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTkB,KAAM,IAAID,KAJC,E,sEAQT,IAAD,OAECmE,EAAevE,KAAKd,MAAMsF,iBAChCD,EAAaE,SAAQ,SAAAxG,GACjBA,EAAEiG,SAAU,KAEhBK,EAAaG,MAAK,SAACC,EAAOC,GAAR,OAAkBA,EAAMC,cAAcC,kBAAoBH,EAAME,cAAcC,qBAEhG9E,KAAKd,MAAM6F,cAAcL,MAAK,SAACM,EAAIC,GAAL,OAAYD,EAAGE,YAAcD,EAAGC,eAC9D,IAAMC,EAAYnF,KAAKd,MAAM6F,cAAcK,KAAI,SAAAlI,GAC3C,IAAMmI,EAAUnI,EAAKoI,aAAaD,QAElC,OADAA,EAAQlB,aAAejH,EAAKoI,aAAanB,aAClCkB,KAELE,EAAWhB,EAAaiB,OAAOL,GAGrC,OADA5G,QAAQC,IAAIwB,KAAKd,MAAMuG,OAEnB,6BACI,kBAACC,EAAA,EAAD,KACA,+BACI,wBAAIC,KAAM,GACE,2CACA,2CACA,sCACA,6CACA,qCACA,wCACA,0CAGhB,+BAEIJ,EAEKH,KAAI,SAACtE,EAAM8E,GAAP,OACL,wBAAID,IAAKC,GACL,4BAAK9E,EAAKC,WACV,4BAAKD,EAAKuB,UACV,4BAAKvB,EAAK4B,MACV,4BAAK,EAAKvD,MAAMkB,KAAK+D,MAAMyB,QAAQ/E,EAAKQ,MAAM,UAC9C,gCA/F5B,SAAsBrE,EAAQC,GAC1B,IAAM4I,EAAO1B,EAAMpH,kBAAkBC,EAAQC,GAC7C,OAAI4I,EAAKxI,KACC,GAAN,OAAUwI,EAAKxI,KAAf,kBAA6BwI,EAAKtI,MAAlC,UACOsI,EAAKtI,MACN,GAAN,OAAUsI,EAAKtI,MAAf,mBAA+BsI,EAAKrI,QAApC,YACOqI,EAAKrI,QACN,GAAN,OAAUqI,EAAKrI,QAAf,qBAAmCqI,EAAKpI,QAAxC,YAEM,GAAN,OAAUoI,EAAKpI,QAAf,YAsF0BqI,CAAaC,KAAKC,MAA8C,IAAvCnF,EAAK+D,cAAcC,mBAAlD,KACA,4BAAI,kBAACoB,EAAA,EAAD,CAAOrH,QAASoF,EAAenD,GAAMjC,SAArC,IAAiDoF,EAAenD,GAAMgB,KAAtE,MACJ,gCAAMhB,EAAKoD,QAAW,kBAACf,EAAA,EAAD,CAAQtE,QAAQ,kBAAhB,YACX,kBAACsE,EAAA,EAAD,CAAQtE,QAAQ,YAAYkF,UAAU,GAAtC,UADX,gB,GArDWC,a,2BCjDhC,SAASmC,EAAiBC,GAE7B,IAAKA,GAAwC,IAA3BA,EAASC,OAAOnI,OAC9B,MAAO,CACHoI,OAAO,EACPzF,MAAO,uBALwB,MAQgB,IAAI0F,IAAIH,GAAvDI,EAR+B,EAQ/BA,KAAMC,EARyB,EAQzBA,SAAUC,EARe,EAQfA,SAAUC,EARK,EAQLA,SAAUC,EARL,EAQKA,OAEtCC,EAAoBC,IAAYC,MAAMH,EAAOI,MAAM,IACzD,MAAiB,WAAbN,GAAkC,uBAATF,GAA8C,uBAAbC,GAC7C,qBAAbE,GAAoCE,EAAiB,SAAgBA,EAAiB,MAMnF,CACHP,OAAO,GANF,CACLA,OAAO,EACPzF,MAAM,iBAAD,OAAmBuF,EAAnB,kD,aCwCEa,E,YA/CX,WAAY/H,GAAQ,qEACVA,I,sEAIN,IAcMgI,EAAkB9C,EAAMzG,WAdL,CAAC,CACtBwJ,IAAK,qBACLC,MAAO,qBACPtF,KAAM,0GACP,CACCqF,IAAK,uBACLC,MAAO,eACPtF,KAAM,uEACN,CACAqF,IAAK,uBACLC,MAAO,eACPtF,KAAM,yLAEM,GAEhB,OACI,kBAACuF,EAAA,EAAD,KACKH,EAAgB9B,KAAI,SAACkC,EAAYC,GAAb,OACjB,kBAACC,EAAA,EAAD,CAAK7B,IAAK4B,GACL,kBAACE,EAAA,EAAD,CAAU9F,MAAO,CAAC+F,QAAS,OAAQC,cAAe,MAAOC,eAAgB,WACzEN,EAAWlC,KAAI,SAAAtE,GAAI,OAChB,kBAAC+G,EAAA,EAAD,CAAKlC,IAAK7E,EAAKsG,OACX,kBAAC3F,EAAA,EAAD,CAAMC,OAAO,OAAOC,MAAO,CAAEC,MAAO,QAASkG,KAAM,GAAMjG,GAAG,OAAQC,KAAK,SACrE,kBAACL,EAAA,EAAKM,IAAN,CAAUlD,QAAQ,MAAMmD,IAAKlB,EAAKqG,MAElC,kBAAC1F,EAAA,EAAKS,KAAN,KACA,kBAACT,EAAA,EAAKU,MAAN,CAAYR,MAAO,CAACS,SAAU,KAA9B,IAAsCtB,EAAKsG,MAA3C,KACA,kBAAC3F,EAAA,EAAKc,KAAN,CAAWZ,MAAO,CAACS,SAAU,KACxBtB,EAAKgB,sB,GAnCbkC,aCc3B+D,EACF,WAAYhH,EAAW2B,EAAML,EAAUM,EAAWL,EAAUnG,EAAa6G,EAAe1B,EAAOkB,EAAcP,GAAW,oBACpHjC,KAAKe,UAAYA,EACjBf,KAAK0C,KAAOA,EACZ1C,KAAKqC,SAAWA,EAChBrC,KAAK2C,UAAYA,EACjB3C,KAAKsC,SAAWA,EAChBtC,KAAK7D,YAAcA,EACnB6D,KAAKgD,cAAgBA,EACrBhD,KAAKsB,MAAQA,EACbtB,KAAKwC,aAAeA,EACpBxC,KAAKiC,SAAWA,GAuBxB,SAAS+F,EAA6B3C,EAAS4C,GAC3C,IAAMtL,EAAOyH,EAAMlI,kBAAkBmJ,EAAQ6C,kBACvCC,EAAe/D,EAAM1H,gBAAgBC,GAErC6F,EAvBV,SAAyBlB,EAAO2G,GAC5B,IAAMG,EAAaC,KAAW,IAAIjI,KAAQgE,MAAMyB,QAAQvE,EAAO,UAe/D,OAbI2G,EAGe,CACX5G,MAFUgH,IAAUJ,EAAe5G,OAAOiH,aAAaF,GAE1CG,QAAQ,GACrB9F,SAAUwF,EAAexF,UAGd,CACXpB,MAAO+G,EAAWG,QAAQ,GAC1B9F,SAAU,OAUG+F,CAAgBnD,EAAQ/D,MAAO2G,GAE9CQ,EAAgBC,KAAK3B,MAAM1B,EAAQoD,eAIzC,OAFiB,IAAIV,EAAS1C,EAAQtE,UAAWsE,EAAQ3C,KAAM2C,EAAQhD,SAAUgD,EAAQ1C,UACrF8F,EAAcnG,SAAU+C,EAAQ6C,iBAAkBC,EAAc9C,EAAQ/D,MAAOkB,EAAciG,EAAcE,OAInH,IACMC,EAAmB,YACnBC,EAA+B,kBAC/BC,GAAkB,MAElBC,GAAc,gEAEdC,G,YAEF,WAAY9J,GAAQ,IAAD,sBACf,4CAAMA,IADS,IAGP+J,EAAY/J,EAAZ+J,QAEFC,EAAe,IAAIC,gBAAgB,EAAKjK,MAAMkK,SAASxC,QAEvDyC,EAAkBJ,EAAQK,IAAIV,GACpC,EAAKzJ,MAAQ,CACTsG,MAAO,GACP8D,SAAU,GACVxE,cAAe,GACfpE,8BAA+BuI,EAAaI,IAAIT,GAChD3I,aAAcmJ,EACdG,cAAerD,EAAiBkD,GAAiB/C,MACjD2B,eAAgB,KAChBwB,WAAY,KACZC,cAAeR,EAAaI,IAAIR,KAAoBC,GACpDY,kBAAkB,EAClBC,qBAAqB,GAGzBrL,QAAQE,KAAR,4BAAkC,EAAKU,MAAMe,eAG7C,EAAKf,MAAMkB,KAAO,IAAID,IAAK,EAAKjB,MAAMuK,eAEtC,IACI,EAAKvK,MAAMK,iBAAmB,IAAI,EAAKL,MAAMkB,KAAKE,IAAIC,SAClDC,EAAuBC,IACvB,EAAKvB,MAAMwB,8BACX,IAGN,MAAOkJ,GACL,IAAMjL,EAAO,yCAAqCiL,EAAEjL,SACpDL,QAAQsC,MAAMjC,GACd,EAAKO,MAAMsK,WAAa,CACpB7K,UACAkL,aAAc,UAvCP,OA2Cf,EAAKC,qBAAuB,EAAKA,qBAAqBpK,KAA1B,gBAC5B,EAAKqK,2BAA6B,EAAKA,2BAA2BrK,KAAhC,gBA5CnB,E,kIA+CekK,G,8EACxBjL,E,2CAA8CoB,KAAKb,MAAMuK,c,mFAC/DnL,QAAQsC,MAAR,UAAiBjC,EAAjB,aAA6BiL,EAAErI,Q,SACzBxB,KAAKC,SAAS,CAChBwJ,WAAY,CACR7K,UACAkL,aAAc,Y,+RAMtBvL,QAAQE,KAAK,wCAETwL,EAAgB,E,SAEXjK,KAAKb,MAAMK,iB,gCACNQ,KAAKC,SAAU,CACjB2J,qBAAqB,I,wDAIP5J,KAAKb,MAAMK,iBAAiBwB,QAAQkJ,mBAAmBC,O,OAK7E,IALAF,E,OAEA1L,QAAQE,KAAR,8BAAoCwL,IAE9BG,EAAa,GACVnM,EAAI,EAAGA,EAAIgM,EAAehM,IAC/BmM,EAAWjM,KAAKF,G,OAGhBgK,EAAiB,K,oBAEgBoC,IAAMf,IAAN,sEAzFxB,Q,QAyFHgB,E,OACAC,EAAsBD,EAAmBE,KAAnB,IAC5BjM,QAAQE,KAAR,kCA3FS,MA2FT,qBAAqE8L,IACrEtC,EAAiB,CACT5G,MAAOkJ,EACP9H,SA9FC,O,mDAiGTlE,QAAQsC,MAAR,6BAjGS,MAiGT,qBAAiE,KAAEW,Q,yBAEhDiJ,QAAQC,IAAIN,EAAWhF,KAAI,SAAAuF,GAAE,OAAI,EAAKxL,MAAMK,iBAAiBwB,QAAQ4J,WAAWD,GAAIR,W,WAArGZ,E,OACNhL,QAAQE,KAAR,kBAAwBuB,KAAKb,MAAMoK,SAASrL,OAA5C,cAEI6G,EAAgB,IAEhB/E,KAAKb,MAAMe,a,wBAEL2K,EAA4B7K,KAAKb,MAAMkB,KAAK+D,MAAM0G,UAAU9K,KAAKb,MAAMe,c,UACvDF,KAAKb,MAAMK,iBAAiBuL,cAC9C,YAAa,CAETC,UAAW,EACXC,QAAS,W,QAEjBlG,GANAA,E,QAM8BmG,QAAO,SAAAC,GAAC,OAAIA,EAAE7F,aAAa8F,gBAAkBP,KAG3EtM,QAAQE,KAAR,kBAAwBsG,EAAc7G,OAAtC,8BACAK,QAAQC,IAAIuG,G,yBAGV/E,KAAKC,SAAS,CAChBsJ,WACAxE,gBACAkD,iBACA2B,qBAAqB,I,8DAGrB,KAAEhL,QAAQyM,SAAS,+BAAgC,KAAEzM,QAAQyM,SAAS,uC,wBAChEzM,E,mBAAsBoB,KAAKb,MAAMwB,8B,gEACvCpC,QAAQsC,MAAMjC,G,UACRoB,KAAKC,SAAS,CAChBwJ,WAAY,CACR7K,UACAkL,aAAc,UAElBF,qBAAqB,I,oCAElB,KAAEhL,QAAQyM,SAAV,+B,wBACDzM,E,+DACNL,QAAQsC,MAAMjC,G,UACRoB,KAAKC,SAAS,CAChBwJ,WAAY,CACR7K,UACAkL,aAAc,WAElBF,qBAAqB,I,iDAGnB5J,KAAKsL,4BAAL,M,4MAKSC,G,8EACvBA,EAAMC,iBACAC,EAAOF,EAAMG,cACbtF,EAAWqF,EAAKE,SAASC,aAAavK,MAC5C9C,QAAQE,KAAR,kCAAwC2H,MAGlCyF,EAAqB1F,EAAiBC,IACrBE,M,wBACnBtG,KAAKd,MAAM+J,QAAQ6C,IAAIlD,EAAkBxC,EAAU,CAAE2F,KAAM,M,SACrD/L,KAAKC,SAAU,CACjBuJ,eAAe,EACftJ,aAAckG,I,sCAGlB7H,QAAQsC,MAAR,oBAA2BuF,EAA3B,wBAAmDyF,EAAmBhL,Q,UAChEb,KAAKC,SAAS,CAChBuJ,eAAe,I,kMAKM+B,G,yEAC7BA,EAAMC,iBACAC,EAAOF,EAAMG,cACbM,EAAiBP,EAAKE,SAASM,mBAAmB5K,MACxD9C,QAAQE,KAAR,kCAAwCuN,IAExChM,KAAKd,MAAMgN,QAAQ/N,KAAnB,YAA6B0K,EAA7B,YAA6DmD,IAC7D3N,OAAO+K,SAAS+C,S,kJAIhB5N,QAAQE,KAAK,oC,+BAIP,IAAD,OAEC2N,EAAepM,KAAKb,MAAMoK,SAC3B2B,QAAO,SAAA7F,GAAO,OAAIA,EAAQgH,SAAWhH,EAAQR,cAAcwH,UAC3DjH,KAAI,SAAAC,GAAO,OAAI2C,EAA6B3C,EAAS,EAAK4C,mBAEzDzD,EAAmBxE,KAAKb,MAAMoK,SAC/B2B,QAAO,SAAA7F,GAAO,OAAIA,EAAQgH,QAAUhH,EAAQR,cAAcwH,QAAUhH,EAAQR,cAAcuG,gBAAkB,EAAKjM,MAAMe,gBAEtHgH,EAAkB9C,EAAMzG,WAAWyO,EADzB,GAEhB,OACI,6BACMpM,KAAKsM,aAAa9H,EAAkBxE,KAAKb,MAAM4F,eACjD,6BACI,uGACA,uBAAGjD,KAAK,QAAR,oEACA,kBAAC+B,EAAA,EAAD,CAAOhF,QAAQ,QAAf,iDAAoE,uBAAGgE,KAAK,8BAAR,gBAApE,mBAAyI,uBAAGA,KAAK,iCAAR,eAAzI,kDACE7C,KAAKuM,sBACLvM,KAAKb,MAAMyK,oBAA2E,KAApD,kBAAC4C,EAAA,EAAD,CAASC,UAAU,SAAS5N,QAAQ,YACtEmB,KAAKb,MAAMsK,WAAc,kBAAC5F,EAAA,EAAD,CAAOhF,QAASmB,KAAKb,MAAMsK,WAAWK,cAAtC,IAAsD9J,KAAKb,MAAMsK,WAAW7K,SAAqB,MAE9HoB,KAAK0M,mBAAmBlI,EAAkBxE,KAAKb,MAAM4F,eACrD/E,KAAKb,MAAMwB,8BAAiCX,KAAK2M,mBAAmBzF,GAAmB,kBAAC,EAAD,UACzF,gC,mCAKC1C,EAAkBO,GAAgB,IAAD,OAC1C,OACI,kBAAC6H,EAAA,EAAD,CAASC,OAAO,KAAKhL,GAAG,OAAQC,KAAK,SACrC,kBAAC8K,EAAA,EAAOE,MAAR,CAAcjK,KAAK,KACf,yBACIb,IAAI,yBACJJ,MAAM,KACNsB,OAAO,KACPK,UAAU,2BACVwJ,IAAI,0BAGR,kBAACC,EAAA,EAAIpK,KAAL,qBACA,kBAACoK,EAAA,EAAIpK,KAAL,CAAUQ,QAAS,kBAAM,EAAKnD,SAAS,CAAE0J,kBAAkB,MAA3D,aACgB3J,KAAKb,MAAMyK,oBACkC5J,KAAKiN,2BAA2BzI,EAAkBO,GAAtG,kBAACyH,EAAA,EAAD,CAASC,UAAU,SAAS5N,QAAQ,aAE7C,kBAACmO,EAAA,EAAIpK,KAAL,CAAUC,KAAK,SAAf,SACA,kBAACmK,EAAA,EAAIpK,KAAL,CAAWC,KAAK,iCAAhB,IAAkD,yBAAKK,OAAO,KAAKtB,MAAM,KAAKI,IAAI,oEAAoE+K,IAAI,gBAA1J,S,iDAKevI,EAAkBO,GACzC,IAAMmI,EAAa1I,EAAiBtG,OAC9BiP,EAAmBpI,EAAcmG,QAAO,SAAAC,GAAC,OAAIA,EAAE7F,aAAanB,eAAiBC,EAAMxH,aAAaC,uBAAuBwH,cAAYnG,OACnIkP,EAAarI,EAAcmG,QAAO,SAAAC,GAAC,OAAIA,EAAE7F,aAAanB,eAAiBC,EAAMxH,aAAaC,uBAAuBwH,cAAYnG,OACnI,OACI,yBAAKyD,MAAO,CAAC+F,QAAQ,iBACjB,kBAACxB,EAAA,EAAD,CAAOrH,QAAQ,WAAWqO,GAC1B,kBAAChH,EAAA,EAAD,CAAOrH,QAAQ,WAAWsO,GAC1B,kBAACjH,EAAA,EAAD,CAAOrH,QAAQ,UAAUuO,M,4CAMjC,OACI,6BACI,kBAACC,EAAA,EAAD,CAAM9J,UAAU,iBAAiB+J,YAAU,EAACC,UAAWvN,KAAKb,MAAMqK,cAAegE,SAAUxN,KAAK+J,sBAC5F,kBAACsD,EAAA,EAAKI,MAAN,CAAYC,GAAIlG,IAAKmG,UAAU,gBAC3B,kBAACN,EAAA,EAAKO,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,oBACA,kBAACjG,EAAA,EAAD,CAAKiG,GAAG,MACJ,kBAACT,EAAA,EAAKU,QAAN,CAAcC,WAAYhO,KAAKb,MAAMqK,cAAe7H,MAAO,CAAEC,MAAO,KAAOgC,KAAK,MAAMqK,YAAY,kCAAkCC,aAAclO,KAAKb,MAAMe,gBAEjK,kBAACmN,EAAA,EAAKU,QAAQI,SAAd,CAAuBvK,KAAK,WAA5B,uCAKR,kBAACyJ,EAAA,EAAD,CAAO9J,UAAU,iBAAiBiK,SAAUxN,KAAKgK,4BAC7C,kBAACqD,EAAA,EAAKI,MAAN,CAAYC,GAAIlG,IAAK5D,KAAK,OAAQ+J,UAAU,sBACxC,kBAACN,EAAA,EAAKO,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,uBACC,kBAACjG,EAAA,EAAD,CAAKiG,GAAG,MACL,kBAACT,EAAA,EAAKU,QAAN,CAAepM,MAAO,CAAEC,MAAO,KAAOqM,YAAY,yCAAyCC,aAAclO,KAAKb,MAAMwB,sC,yCAQzH6D,EAAkBO,GAAgB,IAAD,OAChD,OACI,6BACA,kBAAC1B,EAAA,EAAD,CACIxB,GAAG,OACHuM,gBAAgB,YAChB5K,KAAMxD,KAAKb,MAAMwK,iBACjBlG,OAAQ,kBAAM,EAAKxD,SAAU,CAAE0J,kBAAkB,MAEjD,kBAACtG,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACzB,kBAACN,EAAA,EAAMlB,MAAP,0BAEA,kBAACkB,EAAA,EAAMnB,KAAP,KACI,kBAAC,EAAD,CAA0BsC,iBAAkBA,EAAkBO,cAAeA,S,yCAO1EmC,GAAkB,IAAD,OAChC,OACI,kBAACG,EAAA,EAAD,KACCH,EAAgB9B,KAAI,SAACkC,EAAYC,GAAb,OACjB,kBAACC,EAAA,EAAD,CAAK7B,IAAK4B,GACLD,EAAWlC,KAAI,SAAAtE,GAAI,OAChB,kBAAC+G,EAAA,EAAD,CAAKlC,IAAK7E,EAAKC,WACf,kBAAC,EAAD,CAAmBD,KAAMA,EACrBZ,aAAc,EAAKf,MAAMe,aACzB+H,eAAgB,EAAK9I,MAAM8I,eAC3BtH,8BAA+B,EAAKxB,MAAMwB,6C,GA/SrCqD,aA2TlBqK,eAAYrF,IClUZsF,G,iLA9DP,OACA,yBAAK/K,UAAU,QACV,kBAACqJ,EAAA,EAAD,CAASC,OAAO,KAAKhL,GAAG,OAAQC,KAAK,SAClC,kBAAC8K,EAAA,EAAOE,MAAR,CAAcjK,KAAK,KACf,yBACIb,IAAI,yBACJJ,MAAM,KACNsB,OAAO,KACPK,UAAU,2BACVwJ,IAAI,0BAGZ,kBAACC,EAAA,EAAIpK,KAAL,qBACA,kBAACoK,EAAA,EAAIpK,KAAL,CAAUC,KAAK,KAAf,kBACA,kBAACmK,EAAA,EAAIpK,KAAL,CAAWC,KAAK,iCAAhB,IAAkD,yBAAKK,OAAO,KAAKtB,MAAM,KAAKI,IAAI,oEAAoE+K,IAAI,gBAA1J,OAEJ,oCACA,6BAEA,qDACA,4FAAiE,uBAAGlK,KAAK,sDAAR,8CAAjE,sLAEA,mDACI,oGAAyE,uBAAIA,KAAK,yBAAT,2BAAzE,mHACA,0CAAe,uBAAGA,KAAK,uBAAR,eAAf,qKAvBR,wUA0B4H,uBAAGA,KAAK,iCAAR,WA1B5H,IA2BI,qDACI,4HAAiG,uBAAGA,KAAK,iCAAR,UAAjG,4BACJ,oDACA,+QAGA,6GACA,4PAGA,iOAGA,2FACA,wPAEA,4KACA,gUAEA,iXAGgB,uBAAGA,KAAK,kFAAR,kCAChB,gGACA,4NAGA,6BACA,kC,GA1DgBmB,a,2BC4C5B,SAASuK,KACP,OAAO,kBAAC,GAAD,MAIMC,OAxCf,WACE,OACE,yBAAKjL,UAAU,OACb,iCAGA,yBAAKA,UAAU,YACb,kBAAC,KAAD,KACA,6BAGE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOwI,KAAK,SACV,kBAACwC,GAAD,OAEF,kBAAC,KAAD,CAAOxC,KAAK,IAAI0C,UAAWzF,SAanC,kBAAC4D,EAAA,EAAD,CAAQC,OAAO,KAAKhL,GAAG,OAAQC,KAAK,QAAQyB,UAAU,4CACpD,kBAACyJ,EAAA,EAAIpK,KAAL,gFC/Bc8L,QACW,cAA7BrQ,OAAO+K,SAAS3C,UAEe,UAA7BpI,OAAO+K,SAAS3C,UAEhBpI,OAAO+K,SAAS3C,SAASrK,MACvB,2D,OCXNuS,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.031cc841.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","const CSGO_APP_ID = 730\nconst CSGO_CONTEXT_ID = 2\n\nfunction inspectLinkToSMAD(inspectLink) {\n    const inspectLinkRegex = /([sm])([0-9]+)a([0-9]+)d([0-9]+)/i\n    let match = inspectLink.toLowerCase().match(inspectLinkRegex)\n    return {\n      s: match[1] === 's' ? match[2] : null,\n      m: match[1] === 'm' ? match[2] : null,\n      a: match[3],\n      d: match[4]\n    }\n}\n\n\nfunction getInventoryURL(smad) {\n    return `https://steamcommunity.com/profiles/${smad.s}/inventory#${CSGO_APP_ID}_${CSGO_CONTEXT_ID}_${smad.a}`\n}\n\nconst TradeOutcome = {\n    SUCCESSFULLY_CONFIRMED: 0,\n    UNABLE_TO_CONFIRM_PRIVATE_PROFILE: 1,\n    DELETED_LISTING: 2\n}\n\nfunction getTimeDifference(future, past) {\n        // get total seconds between the times\n    var delta = Math.abs(future - past) / 1000\n\n    // calculate (and subtract) whole days\n    var days = Math.floor(delta / 86400)\n    delta -= days * 86400\n\n    // calculate (and subtract) whole hours\n    var hours = Math.floor(delta / 3600) % 24\n    delta -= hours * 3600\n    // calculate (and subtract) whole minutes\n    var minutes = Math.floor(delta / 60) % 60\n    delta -= minutes * 60\n\n    // what's left is seconds\n    var seconds = delta % 60  // in theory the modulus is not required\n    return {\n        days,\n        hours,\n        minutes,\n        seconds: Math.floor(seconds)\n    }\n}\n\nfunction makeGroups(array, groupSize) {\n    if (groupSize < 1) {\n        throw new Error(`Group size ${groupSize} < 1.`)\n    }\n\n    const groups = []\n    let group = []\n    for (let i = 0; i < array.length; i++) {\n        if (group.length < groupSize) {\n            group.push(array[i])\n        } else {\n            groups.push(group) \n            group = [array[i]]\n        }\n    }\n    groups.push(group)\n    return groups\n}\n\nexport default {\n    inspectLinkToSMAD,\n    getInventoryURL,\n    TradeOutcome,\n    getTimeDifference,\n    makeGroups\n}","import React, { Component } from 'react'\nimport Button from 'react-bootstrap/Button'\n// import ListGroup from 'react-bootstrap/ListGroup'\nimport Modal from 'react-bootstrap/Modal'\nimport Card from  'react-bootstrap/Card'\nimport Alert from  'react-bootstrap/Alert'\nimport Web3 from 'web3'\n\nimport CSGOSteamTradeContract from './CSGOSteamTrade'\n\nfunction getMetamask() {\n    if (typeof window.ethereum !== 'undefined') {\n        console.log('Metamask web3 is enabled')       \n        // eslint-disable-next-line     \n        return window.ethereum\n      } else {\n        console.info('web3 is not found')\n        return false\n      }\n}\n\nconst PURCHASE_STATUSES = {\n    REQUEST_PENDING: {\n        message: 'Sending request to purchase and waiting for confirmation..',\n        variant: 'info'\n    },\n    REQUESTED_SUCCESFULLY: {\n        message: 'Purchase requested succesfully. You will soon receive a Trade Offer from the seller.',\n        variant: 'success'\n    },\n    REQUEST_FAILED: (failureReason) => {\n        return  {\n            message: `Failed to request purchase. Reason: ${failureReason}`,\n            variant: 'danger'\n        }\n    }\n}\n\nclass SaleItemComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showPurchaseModal: false,\n            metamaskAvailable: false,\n            metamaskPermissionGranted: false,\n            metamaskWeb3: null,\n            contractInstance: null,\n            purchaseStatus: null\n        }\n\n        this.handleShowPurchaseModal = this.handleShowPurchaseModal.bind(this)\n        this.handleClosePurchaseModal = this.handleClosePurchaseModal.bind(this) \n        this.handlePurchaseRequest = this.handlePurchaseRequest.bind(this) \n        this.requestMetamaskAccess = this.requestMetamaskAccess.bind(this)\n    }\n\n    async componentDidMount() {\n        const metamaskEthereum = getMetamask()\n        await this.setState({ metamaskAvailable: metamaskEthereum })\n    }\n\n    async handleShowPurchaseModal() {\n        if (!this.props.userTradeURL) {\n            alert('Please set a valid Steam URL before purchasing.')\n            return\n        }\n        await this.requestMetamaskAccess()\n        await this.setState({ showPurchaseModal: true })\n    }\n\n    async requestMetamaskAccess() {\n        const metamaskEthereum = getMetamask()\n        if (metamaskEthereum) {\n            const metamaskWeb3 = new Web3(window.web3.currentProvider)\n            const contractInstance = new metamaskWeb3.eth.Contract(\n                CSGOSteamTradeContract.abi,\n                this.props.csgoSteamTradeContractAddress,\n                {}\n              )\n            await this.setState({ contractInstance, metamaskWeb3 })\n            try {\n                // Request account access if needed\n                await metamaskEthereum.enable()\n                console.info('Succesfully gained access to metamask.')\n\n\n                await this.setState({ metamaskPermissionGranted: true })\n            } catch (error) {\n                // User denied account access...\n                console.error('Failed to gain access to metamask.')\n                await this.setState({ metamaskPermissionGranted: false })\n            }\n        }\n    }\n\n    async handleClosePurchaseModal() {\n        await this.setState({ showPurchaseModal: false })\n    }\n\n    async handlePurchaseRequest() {\n        console.info(`Creating purchase offer for listingId ${this.props.item.listingId} with trade URL ${this.props.userTradeURL} `)\n        \n        try {\n\n            await this.setState({\n                purchaseStatus: PURCHASE_STATUSES.REQUEST_PENDING,\n            })\n\n            const response = await this.state.contractInstance.methods\n            .createPurchaseOffer(this.props.item.listingId, this.props.userTradeURL)\n            .send({\n                from: window.web3.eth.defaultAccount,\n                value: this.props.item.price\n            })\n\n            await this.setState({\n                purchaseStatus: PURCHASE_STATUSES.REQUESTED_SUCCESFULLY,\n            })\n        console.info(response)\n        } catch (e) {\n            console.error(`Failed to submit purchase offer to the contract. ${e.stack}`)\n            await this.setState({\n                purchaseStatus: PURCHASE_STATUSES.REQUEST_FAILED(e.message)\n            })\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div>\n            <Card border=\"info\" style={{ width: '18rem' }}  bg=\"dark\"  text=\"white\" >\n                <Card.Img variant=\"top\" src={this.props.item.imageSrc} />\n                <Card.Body>\n                <Card.Title style={{fontSize: 14}} > {this.props.item.skinName} {this.props.item.statTrak ? 'StatTrak™' : null} </Card.Title>\n                <Card.Text style={{fontSize: 14}} >\n                   {this.props.item.displayPrice.value} {this.props.item.displayPrice.currency}                    \n                </Card.Text>\n                <Card.Text style={{fontSize: 12}}>\n                    Wear: {this.props.item.wear}\n                </Card.Text>\n                <Card.Text style={{fontSize: 12}}>\n                    Paint seed: {this.props.item.paintSeed}\n                </Card.Text>\n                <Card.Link href={this.props.item.inspectLink}>\n                    <span role=\"img\" aria-label=\"eyes\">👀</span>\n                </Card.Link>\n\n                <Card.Link href={this.props.item.inventoryLink} target=\"_blank\" text=\"View on Steam\">\n                <img height=\"32\" width=\"32\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/steam.svg\" />\n                </Card.Link>\n                <Button variant=\"primary\" onClick={this.handleShowPurchaseModal} > Purchase </Button>\n                </Card.Body>\n            </Card>\n            <Modal size=\"lg\" className=\"modal\" show={this.state.showPurchaseModal} onHide={this.handleClosePurchaseModal}>\n                    <Modal.Header closeButton>\n                    <Modal.Title>Purchase</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    { !this.state.metamaskAvailable ? (<div> <span role=\"img\" aria-label=\"exclamation-mark\">❗</span> <span role=\"img\" aria-label=\"fox\">🦊</span> Please install\n                     the <a href='https://metamask.io/'>Metamask</a> browser\n                    extension in order to make payments, and after refresh this page. </div>) : null }\n                    { this.state.metamaskAvailable && !this.state.metamaskPermissionGranted ? (<div> <span role=\"img\" aria-label=\"exclamation-mark\">❗</span> <span role=\"img\" aria-label=\"fox\">🦊</span> \n                    In order to purchase items, access to\n                         your <a href='https://metamask.io/'>Metamask</a> address is required.\n                         <Button type=\"button\" className=\"btn btn-primary\" onClick={this.requestMetamaskAccess} > Grant access </Button> </div>) : null }\n                        <p>{this.props.item.skinName}</p>\n                        <p>Price: {this.props.item.displayPrice.value} {this.props.item.displayPrice.currency}</p>\n                        <p>Wear: {this.props.item.wear}</p>\n                        {this.state.purchaseStatus ? (<Alert variant={this.state.purchaseStatus.variant}> {this.state.purchaseStatus.message} </Alert>) : null}\n                    </Modal.Body>\n                    <Modal.Footer>\n\n                    <button type=\"button\" className=\"btn btn-primary\" disabled={!this.state.metamaskAvailable || !this.state.metamaskPermissionGranted }  onClick={this.handlePurchaseRequest} > Purchase </button>\n                    <a href={this.props.item.inspectLink}><button type=\"button\" className=\"btn btn-primary\"> View on Steam </button></a>\n                    <a target=\"_blank\" href={this.props.item.inventoryLink}><button type=\"button\" className=\"btn btn-primary\"> View in inventory </button></a>\n                    <Button variant=\"secondary\" onClick={this.handleClosePurchaseModal}>\n                        Close\n                    </Button>\n                    </Modal.Footer>\n            </Modal>\n          </div>\n        )\n    }\n}\n\n\nexport default SaleItemComponent","import React, { Component } from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Web3 from 'web3'\nimport Badge from 'react-bootstrap/Badge'\nimport Button from 'react-bootstrap/Button'\nimport utils from './utils'\n\nfunction getPrettyAge(future, past) {\n    const diff = utils.getTimeDifference(future, past)\n    if (diff.days) {\n        return `${diff.days} days, ${diff.hours} hours`\n    } else if (diff.hours) {\n        return `${diff.hours} hours, ${diff.minutes} minutes`\n    } else if (diff.minutes) {\n        return `${diff.minutes} minutes, ${diff.seconds} seconds`\n    } else {\n        return `${diff.seconds} seconds`\n    }\n}\n\nfunction getStatusBadge(item) {\n    if (item.pending) {\n        return {\n            variant: 'warning',\n            text: 'Pending delivery'\n        }\n    } else {\n        if (item.tradeOutcome === utils.TradeOutcome.DELETED_LISTING.toString()) {\n            return {\n                variant: 'danger',\n                text: 'Deleted by vendor'\n            }\n        } else if (item.tradeOutcome === utils.TradeOutcome.SUCCESSFULLY_CONFIRMED.toString()) {\n            return {\n                variant: 'success',\n                text: 'Delivered'\n            }\n        } else if (item.tradeOutcome === utils.TradeOutcome.UNABLE_TO_CONFIRM_PRIVATE_PROFILE.toString()) {\n            return {\n                variant: 'danger',\n                text: 'Profile was private'\n            }\n        } else {\n            return {\n                variant: 'info',\n                text: 'Unknown'\n            }\n        }\n    }\n}\n\nclass PurchaseHistoryComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            web3: new Web3()\n        }\n    }\n\n    render() {\n\n        const pendingItems = this.props.pendingPurchases\n        pendingItems.forEach(i => {\n            i.pending = true\n        })\n        pendingItems.sort((item1, item2) => item2.purchaseOffer.creationTimestamp - item1.purchaseOffer.creationTimestamp)\n\n        this.props.pastPurchases.sort((p1, p2) => p1.blockNumber - p2.blockNumber)\n        const pastItems = this.props.pastPurchases.map(past => {\n            const listing = past.returnValues.listing\n            listing.tradeOutcome = past.returnValues.tradeOutcome\n            return listing\n        })\n        const allItems = pendingItems.concat(pastItems)\n\n        console.log(this.props.items)\n        return (\n            <div>\n                <Table>\n                <thead>\n                    <tr key={-1}>\n                                <th>Listing Id </th>\n                                <th> Skin Name </th>\n                                <th> Wear </th>\n                                <th> Price (ETH) </th>\n                                <th> Age </th>\n                                <th> Status </th>\n                                <th> Action </th>\n                    </tr>\n                </thead>\n                <tbody>\n                {\n                    allItems\n                        \n                        .map((item, idx) => (\n                        <tr key={idx}>\n                            <th>{item.listingId}</th>\n                            <th>{item.skinName}</th>\n                            <th>{item.wear}</th>\n                            <th>{this.state.web3.utils.fromWei(item.price,'ether')}</th>\n                            <th> {getPrettyAge(Date.now(), item.purchaseOffer.creationTimestamp * 1000)} </th>\n                            <th><Badge variant={getStatusBadge(item).variant} > {getStatusBadge(item).text} </Badge></th>\n                            <th> {item.pending ? (<Button variant='outline-danger'> Cancel </Button>)\n                                    : (<Button variant='secondary' disabled={true}> None </Button>)} </th>\n                        </tr>\n                    ))\n                }\n                </tbody>\n                </Table>\n            </div>\n        )   \n    }\n}\n\nexport default PurchaseHistoryComponent","import querystring from 'querystring'\n\nexport function validateTradeURL(tradeURL) {\n\n    if (!tradeURL  || tradeURL.trim().length === 0) {\n        return {\n            valid: false,\n            error: 'Trade URL is empty.'\n        }\n    }\n    const { host, hostname, protocol, pathname, search } = new URL(tradeURL)\n    // without the question mark\n    const parsedQuerystring = querystring.parse(search.slice(1))\n    if (protocol !== 'https:' || host !== 'steamcommunity.com' || hostname !== 'steamcommunity.com' ||\n        pathname !== '/tradeoffer/new/' || !parsedQuerystring['partner'] || !parsedQuerystring['token']) {\n      return {\n        valid: false,\n        error: `The trade url ${tradeURL} is not a valid steamcommunity.com trade URL.`\n      }\n    }\n    return {\n        valid: true\n    }\n}\n\n","import React, { Component } from 'react'\nimport Card from  'react-bootstrap/Card'\nimport Container from  'react-bootstrap/Container'\nimport Row from  'react-bootstrap/Row'\nimport Col from  'react-bootstrap/Col'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport utils from './utils'\n\nclass InfoCardsComponent extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        const genericInfoCards = [{\n            img: '/ethereum_logo.png',\n            title: 'Ethereum purchases',\n            text: 'Purchase items with Ethereum. Enjoy a crystal clear smart contract defined delivery and refund policy.'\n        }, {\n            img: '/percentage_sign.png',\n            title: 'Minimal fees',\n            text: 'Pay only the standard fees incurred by doing Ethereum transactions.'\n        },  {\n            img: '/peertopeer_logo.png',\n            title: 'Peer-to-peer',\n            text: 'There is no trusted custodial middle-man holding the items and funds. The smart contract ensures that funds either are send to seller upon delivery or refunded to buyer on request.'\n        }]\n        const rowSize = 3\n        const rowGroupedItems = utils.makeGroups(genericInfoCards, rowSize)\n        return (\n            <Container >\n                {rowGroupedItems.map((rowOfItems, rowIndex) => (\n                    <Row key={rowIndex}>\n                         <CardDeck style={{display: 'flex', flexDirection: 'row', justifyContent: 'center' }} >\n                        {rowOfItems.map(item => (\n                            <Col key={item.title} >\n                                <Card border=\"info\" style={{ width: '18rem', flex: 1 }}  bg=\"dark\"  text=\"white\" >\n                                    <Card.Img variant=\"top\" src={item.img} />\n                                    \n                                    <Card.Body>\n                                    <Card.Title style={{fontSize: 18}} > {item.title} </Card.Title>\n                                    <Card.Text style={{fontSize: 14}} >\n                                        {item.text}                   \n                                    </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        ))}\n                        </CardDeck>\n                    </Row>\n                ))}\n            </Container> \n        )\n    }\n}\n\nexport default InfoCardsComponent","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport Modal from 'react-bootstrap/Modal'\nimport Container from  'react-bootstrap/Container'\nimport Row from  'react-bootstrap/Row'\nimport Col from  'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Badge from 'react-bootstrap/Badge'\nimport Nav from 'react-bootstrap/Nav'\nimport Alert from 'react-bootstrap/Alert'\nimport Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport {  withCookies } from 'react-cookie'\nimport CSGOSteamTradeContract from './CSGOSteamTrade'\nimport utils from './utils'\nimport SaleItemComponent from './SaleItemComponent'\nimport PurchaseHistoryComponent from './PurchaseHistoryComponent'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { validateTradeURL } from './validation'\nimport InfoCardsComponent from './InfoCardsComponent'\n\nclass ItemData {\n    constructor(listingId, wear, skinName, paintSeed, statTrak, inspectLink, inventoryLink, price, displayPrice, imageSrc) {\n        this.listingId = listingId\n        this.wear = wear\n        this.skinName = skinName\n        this.paintSeed = paintSeed\n        this.statTrak = statTrak\n        this.inspectLink = inspectLink\n        this.inventoryLink = inventoryLink\n        this.price = price\n        this.displayPrice = displayPrice\n        this.imageSrc = imageSrc\n    }\n}\n\nfunction getDisplayPrice(price, ethToFiatPrice) {\n    const etherValue = BigNumber((new Web3()).utils.fromWei(price, 'ether'))\n    let displayPrice = null\n    if (ethToFiatPrice) {\n\n        const value = BigNumber(ethToFiatPrice.value).multipliedBy(etherValue)\n        displayPrice = {\n            value: value.toFixed(2),\n            currency: ethToFiatPrice.currency\n        }\n    } else {\n        displayPrice = {\n            value: etherValue.toFixed(6),\n            currency: 'ETH'\n        }\n    }\n    return displayPrice\n}\n\nfunction contractListingToDisplayItem(listing, ethToFiatPrice) {\n    const smad = utils.inspectLinkToSMAD(listing.ownerInspectLink)\n    const inventoryURL = utils.getInventoryURL(smad)\n\n    const displayPrice = getDisplayPrice(listing.price, ethToFiatPrice)\n\n    const extraItemData = JSON.parse(listing.extraItemData)\n\n    const itemData = new ItemData(listing.listingId, listing.wear, listing.skinName, listing.paintSeed,\n        extraItemData.statTrak, listing.ownerInspectLink, inventoryURL, listing.price, displayPrice, extraItemData.image)\n    return itemData\n}\n\nconst DISPLAY_CURRENCY = 'USD'\nconst COOKIE_TRADE_URL = 'TRADE_URL'\nconst CONTRACT_ADDRESS_QUERY_PARAM = 'contractAddress'\nconst RPC_QUERY_PARAM = 'rpc'\n\nconst DEFAULT_RPC = 'https://ropsten.infura.io/v3/cf8c1af01b1d49198031f5f23baee111'\n\nclass ItemsListComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        const { cookies } = props\n\n        const searchParams = new URLSearchParams(this.props.location.search)\n\n        const currentTradeURL = cookies.get(COOKIE_TRADE_URL)\n        this.state = {\n            items: [],\n            listings: [],\n            pastPurchases: [],\n            csgoSteamTradeContractAddress: searchParams.get(CONTRACT_ADDRESS_QUERY_PARAM),\n            userTradeURL: currentTradeURL,\n            validTradeURL: validateTradeURL(currentTradeURL).valid,       \n            ethToFiatPrice: null,\n            errorState: null,\n            ethNetworkURL: searchParams.get(RPC_QUERY_PARAM) || DEFAULT_RPC,\n            showHistoryModal: false,\n            initialLoadFinished: false\n        }\n\n        console.info(`Loaded trade URL: ${this.state.userTradeURL}`)      \n\n        // eslint-disable-next-line            \n        this.state.web3 = new Web3(this.state.ethNetworkURL)\n        \n        try {\n            this.state.contractInstance = new this.state.web3.eth.Contract(\n                CSGOSteamTradeContract.abi,\n                this.state.csgoSteamTradeContractAddress,\n                {}\n              )\n    \n        } catch (e) {\n            const message = `Failed to initialize contract. ${e.message}`\n            console.error(message)\n            this.state.errorState = {\n                message,\n                alertVariant: 'danger'\n            }\n        }\n\n        this.handleTradeURLSubmit = this.handleTradeURLSubmit.bind(this)\n        this.handleVendorContractSubmit = this.handleVendorContractSubmit.bind(this)\n    }\n\n    async handleWeb3ConnectionFailure(e) {\n        const message = `Failed to connect to the network ${this.state.ethNetworkURL} to fetch active listings. Refresh the page and check your internet connection.`\n        console.error(`${message}. ${e.stack}`)\n        await this.setState({\n            errorState: {\n                message,\n                alertVariant: 'danger'\n            }\n        })\n    }\n\n    async componentDidMount() {\n        console.info('ItemsListComponent componentDidMount')\n        \n        let listingsCount = 0\n        try {\n            if (!this.state.contractInstance) {\n                await this.setState( {\n                    initialLoadFinished: true\n                })\n                return\n            }\n            listingsCount = await this.state.contractInstance.methods.getListingsCount().call()\n\n            console.info(`Listings available: ${listingsCount}`)\n\n            const listingIds = []\n            for (let i = 0; i < listingsCount; i++) {\n                listingIds.push(i)\n            }\n    \n            let ethToFiatPrice = null\n            try {\n                const ethPricingResponse = await Axios.get(`https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=${DISPLAY_CURRENCY}`)\n                const ethToFiatPriceValue = ethPricingResponse.data[DISPLAY_CURRENCY]\n                console.info(`Succesfully fetched ETH/${DISPLAY_CURRENCY} price at ${ethToFiatPriceValue}`)\n                ethToFiatPrice = {\n                        value: ethToFiatPriceValue,\n                        currency: DISPLAY_CURRENCY\n                }\n            } catch (e) {\n                console.error(`Failed to load ETH/${DISPLAY_CURRENCY} pricing. ${e.stack}`)\n            }\n            const listings = await Promise.all(listingIds.map(id => this.state.contractInstance.methods.getListing(id).call()))\n            console.info(`Fetched ${this.state.listings.length} listings`)\n    \n            let pastPurchases = []\n    \n            if (this.state.userTradeURL) {\n                // TODO: use filter option for getPastEvents. Figure out why it doesn't work in its current form\n                const matchingBuyerTradeURLHash = this.state.web3.utils.keccak256(this.state.userTradeURL)\n                pastPurchases = await this.state.contractInstance.getPastEvents(\n                    'TradeDone', {\n                        // filter: { buyerTradeURL: matchingBuyerTradeURLHash },\n                        fromBlock: 0,\n                        toBlock: 'latest' })\n\n                pastPurchases = pastPurchases.filter(p => p.returnValues.buyerTradeURL === matchingBuyerTradeURLHash)\n        \n        \n                console.info(`Fetched ${pastPurchases.length} past purchases for user.`)\n                console.log(pastPurchases)\n            }\n\n            await this.setState({\n                listings,\n                pastPurchases,\n                ethToFiatPrice,\n                initialLoadFinished: true\n            })\n        } catch (e) {\n            if (e.message.includes('is not a contract address') || e.message.includes('capitalization checksum test failed')) {\n                const message = `Provided ${this.state.csgoSteamTradeContractAddress} is not a valid contract address. Cannot load sale listings.`\n                console.error(message)\n                await this.setState({\n                    errorState: {\n                        message,\n                        alertVariant: 'danger'\n                    },\n                    initialLoadFinished: true\n                })\n            } else if (e.message.includes(`please set an address first`)) {\n                const message = `No contract address provided. Set one to load item listings.`\n                console.error(message)\n                await this.setState({\n                    errorState: {\n                        message,\n                        alertVariant: 'primary'\n                    },\n                    initialLoadFinished: true\n                })\n            } else {\n                await this.handleWeb3ConnectionFailure(e)\n            }\n        }\n    }\n\n    async handleTradeURLSubmit(event) {\n        event.preventDefault()\n        const form = event.currentTarget\n        const tradeURL = form.elements.formTradeURL.value\n        console.info(`Saving trade URL saving ${tradeURL}`)\n\n\n        const tradeURLValidation = validateTradeURL(tradeURL)\n        if (tradeURLValidation.valid) {\n            this.props.cookies.set(COOKIE_TRADE_URL, tradeURL, { path: '/' })\n            await this.setState( {\n                validTradeURL: true,\n                userTradeURL: tradeURL\n            })    \n        } else {\n            console.error(`Trade URL ${tradeURL} is invalid. ${tradeURLValidation.error}`)\n            await this.setState({\n                validTradeURL: false\n            })\n        }\n    }\n\n    async handleVendorContractSubmit(event) {\n        event.preventDefault()\n        const form = event.currentTarget\n        const vendorContract = form.elements.formVendorContract.value\n        console.info(`Saving vendor contract  ${vendorContract}`)\n\n        this.props.history.push(`/?${CONTRACT_ADDRESS_QUERY_PARAM}=${vendorContract}`)\n        window.location.reload()\n    }\n\n    componentDidUpdate() {\n        console.info('ItemsForSaleComponent updated.')\n\n    }\n\n    render() {\n\n        const displayItems = this.state.listings\n            .filter(listing => listing.exists && !listing.purchaseOffer.exists)\n            .map(listing => contractListingToDisplayItem(listing, this.ethToFiatPrice))\n\n        const pendingPurchases = this.state.listings\n            .filter(listing => listing.exists && listing.purchaseOffer.exists && listing.purchaseOffer.buyerTradeURL === this.state.userTradeURL)\n        const rowSize = 3\n        const rowGroupedItems = utils.makeGroups(displayItems, rowSize)\n        return (\n            <div>\n                { this.renderNavBar(pendingPurchases, this.state.pastPurchases) }\n                <div>\n                    <h3> Buy CSGO Weapons using Ethereum payments secured with smart contracts </h3>\n                    <p text=\"dark\" >No sign in, no deposits, no trusted middleman, just sweet deals.</p>\n                    <Alert variant='info'>Sugarskins is currently alpha stage software. <a href=\"mailto:dan@danoctavian.com\">Get in touch</a> about bugs and <a href=\"https://github.com/sugarskins\">development</a>. Currently working on Ropsten network only.  </Alert>\n                    { this.renderTradeDataForm() }\n                    {!this.state.initialLoadFinished ? (<Spinner animation=\"border\" variant=\"primary\" />) : null }\n                    { this.state.errorState ? (<Alert variant={this.state.errorState.alertVariant}> {this.state.errorState.message}</Alert> ) : null}\n                </div>\n                { this.renderHistoryModal(pendingPurchases, this.state.pastPurchases)  }\n                { this.state.csgoSteamTradeContractAddress  ? this.renderItemListings(rowGroupedItems) : <InfoCardsComponent> </InfoCardsComponent>}\n                <br></br>\n            </div>\n          )\n    }\n\n    renderNavBar(pendingPurchases, pastPurchases) {\n        return (\n            <Navbar  expand=\"lg\" bg=\"dark\"  text=\"white\"  >\n            <Navbar.Brand href=\"/\">\n                <img\n                    src=\"/logo-sugarskins-1.png\"\n                    width=\"70\"\n                    height=\"70\"\n                    className=\"d-inline-block align-top\"\n                    alt=\"React Bootstrap logo\"\n                />\n                </Navbar.Brand>\n                <Nav.Link > Sugarskins </Nav.Link>\n                <Nav.Link onClick={() => this.setState({ showHistoryModal: true }) }>\n                    Purchases {!this.state.initialLoadFinished ?\n                        (<Spinner animation=\"border\" variant=\"primary\" />) : this.renderPurchaseCountsBadges(pendingPurchases, pastPurchases) }  \n                </Nav.Link>\n                <Nav.Link href=\"#help\">Help </Nav.Link>\n                <Nav.Link  href=\"https://github.com/sugarskins\" > <img height=\"32\" width=\"32\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/github.svg\" alt=\"Github logo\" />  </Nav.Link>\n            </Navbar>\n        )\n    }\n\n    renderPurchaseCountsBadges(pendingPurchases, pastPurchases) {\n        const processing = pendingPurchases.length\n        const doneSuccessfully = pastPurchases.filter(p => p.returnValues.tradeOutcome === utils.TradeOutcome.SUCCESSFULLY_CONFIRMED.toString()).length\n        const doneFailed = pastPurchases.filter(p => p.returnValues.tradeOutcome !== utils.TradeOutcome.SUCCESSFULLY_CONFIRMED.toString()).length\n        return (\n            <div style={{display:'inline-block'}}>\n                <Badge variant=\"warning\">{processing}</Badge> \n                <Badge variant=\"success\">{doneSuccessfully}</Badge> \n                <Badge variant=\"danger\">{doneFailed}</Badge> \n            </div>\n        )\n    }\n\n    renderTradeDataForm() {\n        return (\n            <div>\n                <Form className='App-trade-form' noValidate validated={this.state.validTradeURL} onSubmit={this.handleTradeURLSubmit}>\n                    <Form.Group as={Row} controlId=\"formTradeURL\">\n                        <Form.Label column sm=\"2\" >Steam Trade URL </Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control isInvalid={!this.state.validTradeURL} style={{ width: 680 }} type=\"url\" placeholder=\"Enter Steam Community Trade URL\" defaultValue={this.state.userTradeURL} />\n                        </Col>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid Trade URL.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form>\n                <Form  className='App-trade-form' onSubmit={this.handleVendorContractSubmit}>\n                    <Form.Group as={Row} type=\"text\"  controlId=\"formVendorContract\">\n                        <Form.Label column sm=\"2\" > Contract Address  </Form.Label>\n                         <Col sm=\"10\">\n                            <Form.Control  style={{ width: 420 }} placeholder=\"Enter vendor Ethereum Contract Address\" defaultValue={this.state.csgoSteamTradeContractAddress} />\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </div>\n        )\n    }\n\n    renderHistoryModal(pendingPurchases, pastPurchases) {\n        return (\n            <div>\n            <Modal \n                bg=\"dark\" \n                dialogClassName=\"modal-90w\"\n                show={this.state.showHistoryModal}\n                onHide={() => this.setState( { showHistoryModal: false } )}\n            >\n                <Modal.Header closeButton>\n                <Modal.Title>Purchase history</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <PurchaseHistoryComponent pendingPurchases={pendingPurchases} pastPurchases={pastPurchases}></PurchaseHistoryComponent>\n                </Modal.Body>\n            </Modal>\n        </div>\n        )\n    }\n\n    renderItemListings(rowGroupedItems) {\n        return (\n            <Container>\n            {rowGroupedItems.map((rowOfItems, rowIndex) => (\n                <Row key={rowIndex}>\n                    {rowOfItems.map(item => (\n                        <Col key={item.listingId} >\n                        <SaleItemComponent item={item}\n                            userTradeURL={this.state.userTradeURL}\n                            ethToFiatPrice={this.state.ethToFiatPrice}\n                            csgoSteamTradeContractAddress={this.state.csgoSteamTradeContractAddress}>\n                        </SaleItemComponent>\n                        </Col>\n                    ))}\n                </Row>\n            ))}\n        </Container>\n        )\n    }\n}\n\n\nexport default withCookies(ItemsListComponent)","import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Badge from 'react-bootstrap/Badge'\nimport Nav from 'react-bootstrap/Nav'\n\nclass HelpComponent extends Component {\n    render() {\n        return (\n        <div className=\"Help\">\n             <Navbar  expand=\"lg\" bg=\"dark\"  text=\"white\"  >\n                <Navbar.Brand href=\"/\">\n                    <img\n                        src=\"/logo-sugarskins-1.png\"\n                        width=\"70\"\n                        height=\"70\"\n                        className=\"d-inline-block align-top\"\n                        alt=\"React Bootstrap logo\"\n                    />\n                </Navbar.Brand>\n                <Nav.Link > Sugarskins </Nav.Link>\n                <Nav.Link href=\"/\" > Trading page </Nav.Link>\n                <Nav.Link  href=\"https://github.com/sugarskins\" > <img height=\"32\" width=\"32\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/github.svg\" alt=\"Github logo\" />  </Nav.Link>\n            </Navbar>\n            <h1>Help</h1>\n            <br></br>\n\n            <h2> What is SugarSkins? </h2>\n            <p> SugarSkins is a collection of tools that allows you to trade <a href='https://steamcommunity.com/market/search?appid=730'> Counter Strike: Global Offensive weapons </a> outside the official steam-community market in a way that protects both the buyer and seller from fraud, without using a trusted middleman market and by using Ethereum payments.</p>\n\n            <h2> How does it work? </h2>\n                <p>SugarSkins works by enabling vendors to post their listings within an < a href=\"https://ethereum.org/\">Ethereum smart contract</a> which defines precise rules as to when the funds can reach the seller and when the buyer can ask for a refund.</p>\n                <p>It uses the <a href=\"https://chain.link/\"> Chainlink </a> oracle technology to establish that an item with a unique wear and paint seed is currently owned by the buyer's account to allow the seller to access the funds.</p>\n                If the smart contract cannot establish that the item has reached the buyer's account within 6 hours of the creation of the purchase offer, the buyer can request a refund which will be fulfilled automatically.\n\n                For a detailed technical understanding of the smart contract used, oracle technology and frontend visit the page on <a href=\"https://github.com/sugarskins\">Github </a>.\n            <h2> Is it ready to use? </h2>\n                <p> Sugarskins is currently alpha software so use at your own risk. Check out the development on <a href='https://github.com/sugarskins'>Github</a>. Help is very welcome! </p>\n            <h2> What are the fees? </h2>\n            <p> Currently using SugarSkins means you will pay for standard Ethereum gas fees upon submitting your purchase offer, or asking for a refund.\n                These generally amount to less than 1 USD regardless of the total value of the item being processed. </p>\n\n            <h2> Why use SugarSkins and not  [insert third-party steam trade marketplace] ?  </h2>\n            <p> SugarSkins allows you to trade directly with the seller, while keeping fees at a minimum,\n                requiring no sign-in and being completely transparent in terms refund policy and trade history as described by its smart contract.\n            </p>\n            <p>SugarSkins cannot withold your funds and cannot ban your account (in this case your Ethereum address or steam trade link).\n                It is simply a tool for facilitating secure trading of CS:GO weapons.  </p>\n\n            <h2> Does it work with any other Steam games or types of items?</h2>\n            <p> No, the system is currently tailored specifically for trading CS:GO weapons, meaning CS:GO items that have a wear and paint seed property to allow for easy identification once they move from one account to the other.</p>\n\n            <h2> Why not use an unique id(or ids) to track the item as being part of an inventory instead of skin name, wear and paintseed  (eg. asset id)? </h2>\n            <p> As it stands, when items move from one Steam inventory to another, no unique ids or combination of ids is guaranteed to be maintained after the change.\n                The only guarantee that Steam offers is that the asset id is unique within the app id (730 for CS:GO) and context id at any given time. </p>\n            <p> The 3 properties of the item (skin name, wear, paint seed) are maintained and\n                given the fact that the wear is a float with 12+ significant digits of precision, although not completely random in combination with skin name and paint seed\n                it almost certain to identify that item uniquely even after the item changes inventories.\n                References: <a href=\"https://dev.doctormckay.com/topic/652-asset-id-of-an-item-changes-after-trade/\"> asset id changing behaviour </a></p>\n            <h2> Are the Steam items represented as Non-fungible tokens (NFTs) ?</h2>\n            <p> No, the listed items are not tracked as NFTs currently, since the protocol is only meant to facilitate a safe trading session and not meant to track\n                item owenrship throughout its lifetime.\n            </p>\n            <br></br>\n            <br></br>\n        </div>\n        )\n    }\n}\n\nexport default HelpComponent","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport ItemsListComponent from './ItemsListComponent'\nimport HelpComponent from './HelpComponent'\nimport url from 'url'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        \n      </header>\n      <div className=\"App-body\">\n        <Router>\n        <div>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/help\">\n              <Help />\n            </Route>\n            <Route path=\"/\" component={ItemsListComponent}>     \n            </Route>\n          </Switch>\n        </div>\n      </Router>\n      </div>\n      {footer()}\n    </div>\n  );\n}\n\nfunction footer() {\n  return (\n    <Navbar expand=\"lg\" bg=\"dark\"  text=\"white\" className='App-footer d-flex justify-content-center' >\n      <Nav.Link > Sugarskins 2019. Powered by Steam. Not affiliated with Valve Corp. </Nav.Link>\n    </Navbar>\n  )\n\n}\n\nfunction Help() {\n  return <HelpComponent></HelpComponent>\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}